# -*- coding: utf-8 -*-
"""face recogniation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QgXWXikDIO9KLj2-zzFbT9iDTDHuRR5p
"""

import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.datasets import fetch_lfw_people
from sklearn.decomposition import PCA
import numpy as np
import os,cv2

def plot_gallery(images, titles, h, w, n_row=3, n_col=4):
  plt.figure(figsize=(1.8*n_col, 2.4*n_row))
  plt.subplots_adjust(bottom=0, left=0.1, right=.99, top=.90, hspace=.35)
  for i in range(n_row*n_col):
    plt.subplot(n_row, n_col, i+1)
    plt.imshow(images[i].reshape((h, w)), cmap=plt.cm.gray)
    plt.title(titles[i], size=12)
    plt.xticks()
    plt.yticks()

dir_name="../dataset"
y=[];X=[];target_names=[]
person_id=0;h=w=300
n_samples=0
class_names=[]
for person_name in os.listdir(dir_name):
  dir_path = dir_name+"/"+person_name+"/"
  class_names.append(person_name)
  for image_name in os.listdir(dir_path):
    image_path = dir_path+image_name
    img = cv2.imread(image_path)
    gray= cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    resized_image= cv2.resize(gray,(h,w))
    v=resized_image.flatten()
    X.append(v)
    n_samples= n_samples+1
    y.append(person_id)
    target_names.append(person_name)
  person_id= person_id+1

y=np.array(y)
X=np.array(X)
target_names=np.array(target_names)
n_features = X.shape[1]
print(y.shape,X.shape,target_names.shape)
print('Number of samples:',n_samples)
n_classes = target_names.shape[0]

print('Total dataset size:')
print("n_samples: %d" % n_samples)
print('n_features: %d' % n_features)
print('n_classes: %d' % n_classes)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

n_components = 150

print('Extracting the top %d eigenfaces from %d faces'%(n_components, X_train.shape[0]))
pca = PCA(n_components=n_components, svd_solver='randomized',whiten=True).fit(X_train)
eigenfaces = pca.components_.reshape((n_components, h, w))
eigenface_titles = ['eigenface %d' % i for i in range(eigenfaces.shape[0])]
plot_gallery(eigenfaces, eigenface_titles, h, w)

plt.show()

print('Projecting the input data on the eigenfaces orthonormal basis')
X_train_pca = pca.transform(X_train)
X_test_pca = pca.transform(X_test)
print(X_train_pca.shape,X_test_pca.shape)

y_pred=[]
for test_face in X_test_pca:
  distances=[]
  for train_face in X_train_pca:
    d= np.linalg.norm(test_face-train_face)
    distances.append(d)
  minimum_distance=min(distances)
  index = distances.index(minimum_distance)
  y_pred.append(y_train[index])

y_pred = np.array(y_pred)

prediction_titles=[]
true_positive = 0
for i in range(y_pred.shape[0]):
  true_name = class_names[y_test[i]]
  pred_name = class_names[y_pred[i]]
  if true_name==pred_name:
    true_positive = true_positive+1
  result = 'predicted: %s\ntrue:    %s' % (pred_name, true_name)
  prediction_titles.append(result)

print("Accuracy:",true_positive*100/y_pred.shape[0])
plot_gallery(X_test, prediction_titles, h, w)
plt.show()